-- Obfuscated!
-- No stealing anymore :)
return(function()local a;do local b=bit32;local c;local d;local e;local f=50;local g={[22]=18,[31]=8,[33]=28,[0]=3,[1]=13,[2]=23,[26]=33,[12]=1,[13]=6,[14]=10,[15]=16,[16]=20,[17]=26,[18]=30,[19]=36,[3]=0,[4]=2,[5]=4,[6]=7,[7]=9,[8]=12,[9]=14,[10]=17,[20]=19,[21]=22,[23]=24,[24]=27,[25]=29,[27]=32,[32]=34,[34]=37,[11]=5,[28]=11,[29]=15,[30]=21,[35]=25,[36]=31,[37]=35}local h={[0]='ABC','ABx','ABC','ABC','ABC','ABx','ABC','ABx','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','AsBx','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','AsBx','AsBx','ABC','ABC','ABC','ABx','ABC'}local i={[0]={b='OpArgR',c='OpArgN'},{b='OpArgK',c='OpArgN'},{b='OpArgU',c='OpArgU'},{b='OpArgR',c='OpArgN'},{b='OpArgU',c='OpArgN'},{b='OpArgK',c='OpArgN'},{b='OpArgR',c='OpArgK'},{b='OpArgK',c='OpArgN'},{b='OpArgU',c='OpArgN'},{b='OpArgK',c='OpArgK'},{b='OpArgU',c='OpArgU'},{b='OpArgR',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgR'},{b='OpArgR',c='OpArgN'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgR',c='OpArgU'},{b='OpArgR',c='OpArgU'},{b='OpArgU',c='OpArgU'},{b='OpArgU',c='OpArgU'},{b='OpArgU',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgN',c='OpArgU'},{b='OpArgU',c='OpArgU'},{b='OpArgN',c='OpArgN'},{b='OpArgU',c='OpArgN'},{b='OpArgU',c='OpArgN'}}local function j(k,l,m,n)local o=0;for p=l,m,n do local q=256^math.abs(p-l)o=o+q*string.byte(k,p,p)end;return o end;local function r(s,t,u,v)local w=(-1)^b.rshift(v,7)local x=b.rshift(u,7)+b.lshift(b.band(v,0x7F),1)local y=s+b.lshift(t,8)+b.lshift(b.band(u,0x7F),16)local z=1;if x==0 then if y==0 then return w*0 else z=0;x=1 end elseif x==0x7F then if y==0 then return w*1/0 else return w*0/0 end end;return w*2^(x-127)*(1+z/2^23)end;local function A(s,t,u,v,B,C,D,E)local w=(-1)^b.rshift(E,7)local x=b.lshift(b.band(E,0x7F),4)+b.rshift(D,4)local y=b.band(D,0x0F)*2^48;local z=1;y=y+C*2^40+B*2^32+v*2^24+u*2^16+t*2^8+s;if x==0 then if y==0 then return w*0 else z=0;x=1 end elseif x==0x7FF then if y==0 then return w*1/0 else return w*0/0 end end;return w*2^(x-1023)*(z+y/2^52)end;local function F(k,l,m)return j(k,l,m-1,1)end;local function G(k,l,m)return j(k,m-1,l,-1)end;local function H(k,l)return r(string.byte(k,l,l+3))end;local function I(k,l)local s,t,u,v=string.byte(k,l,l+3)return r(v,u,t,s)end;local function J(k,l)return A(string.byte(k,l,l+7))end;local function K(k,l)local s,t,u,v,B,C,D,E=string.byte(k,l,l+7)return A(E,D,C,B,v,u,t,s)end;local L={[4]={little=H,big=I},[8]={little=J,big=K}}local function M(N)local O=N.index;local P=string.byte(N.source,O,O)N.index=O+1;return P end;local function Q(N,R)local S=N.index+R;local T=string.sub(N.source,N.index,S-1)N.index=S;return T end;local function U(N)local R=N:s_szt()local T;if R~=0 then T=string.sub(Q(N,R),1,-2)end;return T end;local function V(R,W)return function(N)local S=N.index+R;local X=W(N.source,N.index,S)N.index=S;return X end end;local function Y(R,W)return function(N)local Z=W(N.source,N.index)N.index=N.index+R;return Z end end;local function _(N)local R=N:s_int()local a0=table.create(R)for p=1,R do local a1=N:s_ins()local a2=b.band(a1,0x3F)local a3=h[a2]local a4=i[a2]local a5={value=a1,op=g[a2],A=b.band(b.rshift(a1,6),0xFF)}if a3=='ABC'then a5.B=b.band(b.rshift(a1,23),0x1FF)a5.C=b.band(b.rshift(a1,14),0x1FF)a5.is_KB=a4.b=='OpArgK'and a5.B>0xFF;a5.is_KC=a4.c=='OpArgK'and a5.C>0xFF;if a2==10 then local m=b.band(b.rshift(a5.B,3),31)if m==0 then a5.const=a5.B else a5.const=b.lshift(b.band(a5.B,7)+8,m-1)end end elseif a3=='ABx'then a5.Bx=b.band(b.rshift(a1,14),0x3FFFF)a5.is_K=a4.b=='OpArgK'elseif a3=='AsBx'then a5.sBx=b.band(b.rshift(a1,14),0x3FFFF)-131071 end;a0[p]=a5 end;return a0 end;local function a6(N)local R=N:s_int()local a0=table.create(R)for p=1,R do local a7=M(N)local a8;if a7==1 then a8=M(N)~=0 elseif a7==3 then a8=N:s_num()elseif a7==4 then a8=U(N)end;a0[p]=a8 end;return a0 end;local function a9(N,k)local R=N:s_int()local a0=table.create(R)for p=1,R do a0[p]=e(N,k)end;return a0 end;local function aa(N)local R=N:s_int()local a0=table.create(R)for p=1,R do a0[p]=N:s_int()end;return a0 end;local function ab(N)local R=N:s_int()local a0=table.create(R)for p=1,R do a0[p]={varname=U(N),startpc=N:s_int(),endpc=N:s_int()}end;return a0 end;local function ac(N)local R=N:s_int()local a0=table.create(R)for p=1,R do a0[p]=U(N)end;return a0 end;function e(N,ad)local ae={}local k=U(N)or ad;ae.source=k;N:s_int()N:s_int()ae.num_upval=M(N)ae.num_param=M(N)M(N)ae.max_stack=M(N)ae.code=_(N)ae.const=a6(N)ae.subs=a9(N,k)aa(N)ab(N)ac(N)for af,ag in ae.code do if ag.is_K then ag.const=ae.const[ag.Bx+1]else if ag.is_KB then ag.const_B=ae.const[ag.B-0xFF]end;if ag.is_KC then ag.const_C=ae.const[ag.C-0xFF]end end end;return ae end;function c(k)local ah;local ai;local aj;local ak;local al;local am;local an;local ao={index=1,source=k}assert(Q(ao,4)=='\27Lua','invalid Lua signature')assert(M(ao)==0x51,'invalid Lua version')assert(M(ao)==0,'invalid Lua format')ai=M(ao)~=0;aj=M(ao)ak=M(ao)al=M(ao)am=M(ao)an=M(ao)~=0;ah=ai and F or G;ao.s_int=V(aj,ah)ao.s_szt=V(ak,ah)ao.s_ins=V(al,ah)if an then ao.s_num=V(am,ah)elseif L[am]then ao.s_num=Y(am,L[am][ai and'little'or'big'])else error('unsupported float size')end;return e(ao,'@wfuscator-vm')end;local function ap(a0,aq)for p,ar in pairs(a0)do if ar.index>=aq then ar.value=ar.store[ar.index]ar.store=ar;ar.index='value'a0[p]=nil end end end;local function as(a0,aq,at)local au=a0[aq]if not au then au={index=aq,store=at}a0[aq]=au end;return au end;local function av(aw,ax)local k=aw.source;error(string.format('%s: %s',k,ax),0)end;local function ay(az,aA,aB)local aC=az.code;local aD=az.subs;local aE=az.vararg;local aF=-1;local aG={}local at=az.memory;local aH=az.pc;while true do local aI=aC[aH]local a2=aI.op;aH=aH+1;if a2<18 then if a2<8 then if a2<3 then if a2<1 then for p=aI.A,aI.B do at[p]=nil end elseif a2>1 then local ar=aB[aI.B]at[aI.A]=ar.store[ar.index]else local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;at[aI.A]=aJ+aK end elseif a2>3 then if a2<6 then if a2>4 then local aL=aI.A;local aM=aI.B;local aq;if aI.is_KC then aq=aI.const_C else aq=at[aI.C]end;at[aL+1]=at[aM]at[aL]=at[aM][aq]else at[aI.A]=aA[aI.const]end elseif a2>6 then local aq;if aI.is_KC then aq=aI.const_C else aq=at[aI.C]end;at[aI.A]=at[aI.B][aq]else local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;at[aI.A]=aJ-aK end else at[aI.A]=at[aI.B]end elseif a2>8 then if a2<13 then if a2<10 then aA[aI.const]=at[aI.A]elseif a2>10 then if a2<12 then local aL=aI.A;local aM=aI.B;local aN=aI.C;local aO;if aM==0 then aO=aF-aL else aO=aM-1 end;local aP=table.pack(at[aL](table.unpack(at,aL+1,aL+aO)))local aQ=aP.n;if aN==0 then aF=aL+aQ-1 else aQ=aN-1 end;table.move(aP,1,aQ,aL,at)else local ar=aB[aI.B]ar.store[ar.index]=at[aI.A]end else local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;at[aI.A]=aJ*aK end elseif a2>13 then if a2<16 then if a2>14 then local aL=aI.A;local aM=aI.B;local aO;if aM==0 then aO=aF-aL else aO=aM-1 end;ap(aG,0)return at[aL](table.unpack(at,aL+1,aL+aO))else local aq,aR;if aI.is_KB then aq=aI.const_B else aq=at[aI.B]end;if aI.is_KC then aR=aI.const_C else aR=at[aI.C]end;at[aI.A][aq]=aR end elseif a2>16 then at[aI.A]=table.create(aI.const)else local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;at[aI.A]=aJ/aK end else at[aI.A]=aI.const end else local aL=aI.A;local aS=at[aL+2]local aq=at[aL]+aS;local aT=at[aL+1]local aU;if aS==math.abs(aS)then aU=aq<=aT else aU=aq>=aT end;if aU then at[aL]=aq;at[aL+3]=aq;aH=aH+aI.sBx end end elseif a2>18 then if a2<28 then if a2<23 then if a2<20 then at[aI.A]=#at[aI.B]elseif a2>20 then if a2<22 then local aL=aI.A;local aM=aI.B;local R;if aM==0 then R=aF-aL+1 else R=aM-1 end;ap(aG,0)return table.unpack(at,aL,aL+R-1)else local aM=aI.B;local T=at[aM]for p=aM+1,aI.C do T=T..at[p]end;at[aI.A]=T end else local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;at[aI.A]=aJ%aK end elseif a2>23 then if a2<26 then if a2>24 then ap(aG,aI.A)else local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;if(aJ==aK)==(aI.A~=0)then aH=aH+aC[aH].sBx end;aH=aH+1 end elseif a2>26 then local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;if(aJ<aK)==(aI.A~=0)then aH=aH+aC[aH].sBx end;aH=aH+1 else local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;at[aI.A]=aJ^aK end else at[aI.A]=aI.B~=0;if aI.C~=0 then aH=aH+1 end end elseif a2>28 then if a2<33 then if a2<30 then local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;if(aJ<=aK)==(aI.A~=0)then aH=aH+aC[aH].sBx end;aH=aH+1 elseif a2>30 then if a2<32 then local aV=aD[aI.Bx+1]local aW=aV.num_upval;local aX;if aW~=0 then aX={}for p=1,aW do local aY=aC[aH+p-1]if aY.op==g[0]then aX[p-1]=as(aG,aY.B,at)elseif aY.op==g[4]then aX[p-1]=aB[aY.B]end end;aH=aH+aW end;at[aI.A]=d(aV,aA,aX)else local aL=aI.A;local aM=aI.B;if not at[aM]~=(aI.C~=0)then at[aL]=at[aM]aH=aH+aC[aH].sBx end;aH=aH+1 end else at[aI.A]=-at[aI.B]end elseif a2>33 then if a2<36 then if a2>34 then local aL=aI.A;local R=aI.B;if R==0 then R=aE.len;aF=aL+R-1 end;table.move(aE.list,1,R,aL,at)else local aL=aI.A;local aZ,aT,aS;aZ=assert(tonumber(at[aL]),'`for` initial value must be a number')aT=assert(tonumber(at[aL+1]),'`for` limit must be a number')aS=assert(tonumber(at[aL+2]),'`for` step must be a number')at[aL]=aZ-aS;at[aL+1]=aT;at[aL+2]=aS;aH=aH+aI.sBx end elseif a2>36 then local aL=aI.A;local aN=aI.C;local R=aI.B;local a_=at[aL]local b0;if R==0 then R=aF-aL end;if aN==0 then aN=aI[aH].value;aH=aH+1 end;b0=(aN-1)*f;table.move(at,aL+1,aL+R,b0+1,a_)else at[aI.A]=not at[aI.B]end else if not at[aI.A]~=(aI.C~=0)then aH=aH+aC[aH].sBx end;aH=aH+1 end else local aL=aI.A;local b1=aL+3;if type(at[aL])=="table"then at[aL+1]=at[aL]at[aL]=pairs(at[aL])end;local b2={at[aL](at[aL+1],at[aL+2])}table.move(b2,1,aI.C,b1,at)if at[b1]~=nil then at[aL+2]=at[b1]aH=aH+aC[aH].sBx end;aH=aH+1 end else aH=aH+aI.sBx end;az.pc=aH end end;function d(ae,aA,b3)local function b4(...)local b5=table.pack(...)local at=table.create(ae.max_stack)local aE={len=0,list={}}table.move(b5,1,ae.num_param,0,at)if ae.num_param<b5.n then local b6=ae.num_param+1;local R=b5.n-ae.num_param;aE.len=R;table.move(b5,b6,b6+R-1,1,aE.list)end;local az={vararg=aE,memory=at,code=ae.code,subs=ae.subs,pc=1}local b7=table.pack(pcall(ay,az,aA,b3))if b7[1]then return table.unpack(b7,2,b7.n)else local aw={pc=az.pc,source=ae.source}return av(aw,b7[2])end end;return b4 end;a=function(b8,aA)return d(c(b8),aA)()end end local aa=208;local z=16;local n=string.char;local r=ipairs;local bd=math;local q=string.find;local h=table.pack;local p=string.gsub;local i=table.unpack;local g=table.create;local e=table.insert;local o=string.sub;local t='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'local v=function(ad,an)local am,ah=1,0;local ae=z+an;while ad>0 and ae>0 do local af,ag=ad%2,ae%2;if af~=ag then ah=ah+am;end;ad=(ad-af)/2;ae=(ae-ag)/2;am=am*2;end;if ad<ae then ad=ae;end;while ad>0 do local af=ad%2;if af>0 then ah=ah+am;end;ad=(ad-af)/2;am=am*2;end;return ah;end;local u=function(ai,an)ai=p(ai,'[^'..t..'=]','')ai=p(ai,'.',function(aj)if(aj=='=')then return''end;local ak,af='',(q(t,aj)-1)for al=6,1,-1 do ak=ak..(af%2^al-af%2^(al-1)>0 and'1'or'0')end;return ak;end)ai=p(ai,'%d%d%d?%d?%d?%d?%d?%d?',function(aj)if(#aj~=8)then return''end;local am=0;for al=1,8 do am=am+(o(aj,al,al)=='1'and 2^(8-al)or 0)end;return n(v(am,an))end)return ai;end;local s=function(ad,an)local am,ah=1,0;local ae=aa+an;while ad>0 and ae>0 do local af,ag=ad%2,ae%2;if af~=ag then ah=ah+am;end;ad=(ad-af)/2;ae=(ae-ag)/2;am=am*2;end;if ad<ae then ad=ae;end;while ad>0 do local af=ad%2;if af>0 then ah=ah+am;end;ad=(ad-af)/2;am=am*2;end;return ah;end;local bj,bg,j,y,bf,bm,as,x,l,bq,bh,bn,m,w,bk,be,bc,c,bi,ao,bp,f,k,bo,bl,bb,d=pcall,getmetatable,task.spawn,(function()ao=function(ap,aq,ar)if not ap then as(aq,2+(ar or 0))end;end;local y=g(0)y['partial']=function(at,...)local au=h(...)local av=h(i(au))return function(...)local au=h(...)local aw=g(0)for ax,ay in r(av)do e(aw,ay)end;for ax,ay in r(h(i(au)))do e(aw,ay)end;return at(i(aw))end;end;return y;end)(),getfenv,warn,error,function(ad,am)local ah=g(0)for ae=1,#ad,am do e(ah,o(ad,ae,ae+am-1))end;return ah;end,math.random,UDim2,loadstring,game,string.len,function(ag)local ah=""repeat local br=ag/2;local al,bs=bd['modf'](br)ag=al;ah=bd['ceil'](bs)..ah;until ag==0;return ah;end,require,string,task,96,next,assert,os,table.remove,task.wait,script,typeof,table,15;local ab=g(0)ab[76]=s(300,92)ab[82]=s(312,61)ab[74]=s(306,98,572)ab[8]=u("fX5wdWJlY3h/dg==",1)ab[27]=u("",6)ab[10]=u("ZHd1eHg=",4)ab[111]=s(307,97)ab[69]=s(270,60)ab[125]=s(347,53)ab[98]=s(274,74)ab[34]=u("MXAxcDFwKzFwKzFwKzFwKzFwKzFwKw==",4)ab[90]=s(280,73)ab[59]=s(313,54,920)ab[77]=s(295,85)ab[101]=s(315,99,458)ab[44]=u("Y3JhZ3pyfw==",3)ab[68]=s(292,86)ab[39]=u("cHtyYQ==",3)ab[118]=s(322,112)ab[112]=s(268,62)ab[54]=u("MWx3eHt1fDltdjl/cHd9OW94a3B4e3V8OXB3OW90MA==",9)ab[55]=u("",4)ab[21]=u("YQ==",5)ab[121]=s(309,103,967,290)ab[95]=s(323,117)ab[119]=s(296,88)ab[80]=s(298,116)ab[25]=u("cWVjdA==",6)ab[66]=s(260,52)ab[32]=u("Jw==",6)ab[86]=s(283,74)ab[102]=s(322,112)ab[49]=u("e3xhd2Bm",2)ab[65]=s(298,91)ab[63]=s(320,66)ab[15]=u("Z3dmfWRg",4)ab[124]=s(265,59)ab[47]=u("ant5cQ==",10)ab[99]=s(313,105,513)ab[2]=u("bntpcQ==",10)ab[48]=u("ZHV3fw==",4)ab[45]=u("aXh6cg==",9)ab[52]=u("fXpncWZg",4)ab[56]=s(364,106,427)ab[43]=u("YA==",1)ab[73]=s(323,115)ab[31]=u("IQ==",1)ab[6]=u("c3FgcnF6Yg==",4)ab[50]=u("Zn1jcnB4",3)ab[12]=u("bGFofXd+",8)ab[107]=s(319,53)ab[5]=u("fmd2fmVk",7)ab[108]=s(275,66)ab[109]=s(265,57)ab[79]=s(298,90)ab[88]=s(326,98)ab[1]=u("bnt4dn8=",10)ab[14]=u("dXN/dw==",2)ab[96]=s(266,115,466)ab[30]=u("cn16cA==",4)ab[114]=s(286,76)ab[19]=u("Yw==",4)ab[38]=u("ZQ==",1)ab[89]=s(272,64)ab[106]=s(267,58,508)ab[83]=s(272,82)ab[103]=s(260,106)ab[42]=u("ZA==",12)ab[78]=s(266,56)ab[35]=u("",5)ab[61]=s(360,95,389)ab[110]=s(302,67)ab[87]=s(321,89)ab[62]=s(313,52)ab[126]=s(380,76)ab[92]=s(280,74)ab[81]=s(348,66,505)ab[117]=s(284,76)ab[41]=u("ZQ==",6)ab[91]=s(272,66,457,632,787,205)ab[7]=u("cXNie3Nid2J3dHpz",6)ab[57]=s(379,100)ab[51]=u("Znd1fQ==",6)ab[71]=s(292,86)ab[67]=s(329,69)ab[128]=s(326,77)ab[93]=s(315,106)ab[26]=u("OA==",6)ab[64]=s(338,105)ab[105]=s(309,109,833)ab[75]=s(298,88,342)ab[97]=s(275,118)ab[17]=u("TVxxdSo=",8)ab[120]=s(326,116)ab[129]=s(301,94,358)ab[53]=u("bXZoeXtz",8)ab[13]=u("YXdkeA==",6)ab[116]=s(273,65,983)ab[29]=u("",10)ab[36]=u("IA==",1)ab[127]=s(301,120)ab[113]=s(315,105)ab[104]=s(336,73,725)ab[16]=u("emY=",5)ab[18]=u("Yg==",10)ab[94]=s(279,70)ab[37]=u("aW94",10)ab[40]=u("e29pfg==",12)ab[22]=u("J0c=",10)ab[70]=s(274,64,120,948,775,49,225)ab[24]=u("",1)ab[28]=u("JQ==",8)ab[11]=u("Y3RgZHhjdA==",1)ab[23]=u("QUQ=",10)ab[46]=u("Y3hmd3V9",6)ab[33]=u("e29pfg==",12)ab[20]=u("bQ==",10)ab[85]=s(382,91)ab[100]=s(323,115)ab[72]=s(323,113)ab[122]=s(285,77)ab[115]=s(313,107,372)ab[9]=u("enFsYA==",4)ab[123]=s(296,88)ab[3]=u("dXlscA==",8)ab[60]=s(370,79)ab[58]=s(260,118)ab[4]=u("b2hudXJ7",12)ab[84]=s(370,68)local ba=function(ar)local ac={[ab[s(295,ab[56])]]=bb,[ab[s(312,106,871)]]=bc,[ab[s(284,ab[57],235)]]=bd,[ab[s(299,95)]]=be,[ab[s(263,50)]]=r,[ab[s(276,ab[58])]]=bf,[ab[s(264,ab[59],374)]]=bg,[ab[s(288,88,420,146,969,263)]]=bh,[ab[s(259,58,33)]]=bi,[ab[s(262,60,410)]]=bj,[ab[s(260,63)]]=bk,[ab[s(318,98)]]=bl,[ab[s(304,ab[60])]]=bm,[ab[s(281,ab[61])]]=bn,[ab[s(258,ab[62],521)]]=bo,[ab[s(306,ab[63])]]=bp,[ab[s(308,85)]]=bq,}ac[ab[s(297,ab[64],798,702,924)]]=c;ac[ab[s(312,91,490)]]=d;ac[ab[s(337,116)]]=function(ad,an)local am,ah=ab[65],ab[66];local ae=ac[ab[s(312,ab[67])]]+an;while ad>ab[74]and ae>ab[73]do local af,ag=ad%ab[68],ae%ab[69];if af~=ag then ah=ah+am;end;ad=(ad-af)/ab[70];ae=(ae-ag)/ab[71];am=am*ab[72]end;if ad<ae then ad=ae;end;while ad>ab[79]do local af=ad%ab[75];if af>ab[76]then ah=ah+am;end;ad=(ad-af)/ab[77];am=am*ab[78]end;return ah;end;ac[ab[s(278,111,106)]]=function(ai,an)ai=p(ai,ab[s(297,ab[80],93,545,105)]..t..ab[s(291,101)],ab[s(262,ab[81])])ai=p(ai,ab[s(287,ab[82])],function(aj)if(aj==ab[s(298,ab[84],646)])then return ab[s(281,ab[83])]end;local ak,af=ab[s(312,ab[85])],(q(t,aj)-ab[86])for al=ab[95],ab[94],-ab[93]do ak=ak..(af%ab[92]^al-af%ab[91]^(al-ab[90])>ab[89]and ab[s(356,ab[88])]or ab[s(349,114)])end;return ak;end)ai=p(ai,ab[s(303,61,75)],function(aj)if(#aj~=ab[98])then return ab[s(262,ab[97])]end;local am=ab[99]for al=ab[106],ab[105]do am=am+(o(aj,al,al)==ab[s(298,ab[103])]and ab[102]^(ab[101]-al)or ab[100])end;return n(ac[ab[s(302,56)]](am,an))end)return ai;end;ac[ab[s(302,53,358)]]=function(ad,an)local am,ah=ab[108],ab[109];local ae=ac[ab[s(295,ab[110])]]+an;while ad>ab[117]and ae>ab[116]do local af,ag=ad%ab[111],ae%ab[112];if af~=ag then ah=ah+am;end;ad=(ad-af)/ab[113];ae=(ae-ag)/ab[114];am=am*ab[115]end;if ad<ae then ad=ae;end;while ad>ab[122]do local af=ad%ab[118];if af>ab[119]then ah=ah+am;end;ad=(ad-af)/ab[120];am=am*ab[121]end;return ah;end;ac[ab[s(270,104)]]=(function()ao=function(ap,aq,ar)if not ap then as(aq,ab[124]+(ar or ab[123]))end;end;local y=g(0)y[ab[s(258,ab[125])]]=function(at,...)local au=h(...)local av=h(i(au))return function(...)local au=h(...)local aw=g(0)for ax,ay in r(av)do e(aw,ay)end;for ax,ay in r(h(i(au)))do e(aw,ay)end;return at(i(aw))end;end;return y;end)();(function(az)end)(ac)return ac;end;return a(ab[s(276,83)],ba(ab[129]))end)()
