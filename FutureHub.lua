-- Obfuscated!
-- No stealing anymore :)
return(function()local a;do local b=bit32;local c;local d;local e;local f=50;local g={[22]=18,[31]=8,[33]=28,[0]=3,[1]=13,[2]=23,[26]=33,[12]=1,[13]=6,[14]=10,[15]=16,[16]=20,[17]=26,[18]=30,[19]=36,[3]=0,[4]=2,[5]=4,[6]=7,[7]=9,[8]=12,[9]=14,[10]=17,[20]=19,[21]=22,[23]=24,[24]=27,[25]=29,[27]=32,[32]=34,[34]=37,[11]=5,[28]=11,[29]=15,[30]=21,[35]=25,[36]=31,[37]=35}local h={[0]='ABC','ABx','ABC','ABC','ABC','ABx','ABC','ABx','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','AsBx','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','AsBx','AsBx','ABC','ABC','ABC','ABx','ABC'}local i={[0]={b='OpArgR',c='OpArgN'},{b='OpArgK',c='OpArgN'},{b='OpArgU',c='OpArgU'},{b='OpArgR',c='OpArgN'},{b='OpArgU',c='OpArgN'},{b='OpArgK',c='OpArgN'},{b='OpArgR',c='OpArgK'},{b='OpArgK',c='OpArgN'},{b='OpArgU',c='OpArgN'},{b='OpArgK',c='OpArgK'},{b='OpArgU',c='OpArgU'},{b='OpArgR',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgR'},{b='OpArgR',c='OpArgN'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgR',c='OpArgU'},{b='OpArgR',c='OpArgU'},{b='OpArgU',c='OpArgU'},{b='OpArgU',c='OpArgU'},{b='OpArgU',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgN',c='OpArgU'},{b='OpArgU',c='OpArgU'},{b='OpArgN',c='OpArgN'},{b='OpArgU',c='OpArgN'},{b='OpArgU',c='OpArgN'}}local function j(k,l,m,n)local o=0;for p=l,m,n do local q=256^math.abs(p-l)o=o+q*string.byte(k,p,p)end;return o end;local function r(s,t,u,v)local w=(-1)^b.rshift(v,7)local x=b.rshift(u,7)+b.lshift(b.band(v,0x7F),1)local y=s+b.lshift(t,8)+b.lshift(b.band(u,0x7F),16)local z=1;if x==0 then if y==0 then return w*0 else z=0;x=1 end elseif x==0x7F then if y==0 then return w*1/0 else return w*0/0 end end;return w*2^(x-127)*(1+z/2^23)end;local function A(s,t,u,v,B,C,D,E)local w=(-1)^b.rshift(E,7)local x=b.lshift(b.band(E,0x7F),4)+b.rshift(D,4)local y=b.band(D,0x0F)*2^48;local z=1;y=y+C*2^40+B*2^32+v*2^24+u*2^16+t*2^8+s;if x==0 then if y==0 then return w*0 else z=0;x=1 end elseif x==0x7FF then if y==0 then return w*1/0 else return w*0/0 end end;return w*2^(x-1023)*(z+y/2^52)end;local function F(k,l,m)return j(k,l,m-1,1)end;local function G(k,l,m)return j(k,m-1,l,-1)end;local function H(k,l)return r(string.byte(k,l,l+3))end;local function I(k,l)local s,t,u,v=string.byte(k,l,l+3)return r(v,u,t,s)end;local function J(k,l)return A(string.byte(k,l,l+7))end;local function K(k,l)local s,t,u,v,B,C,D,E=string.byte(k,l,l+7)return A(E,D,C,B,v,u,t,s)end;local L={[4]={little=H,big=I},[8]={little=J,big=K}}local function M(N)local O=N.index;local P=string.byte(N.source,O,O)N.index=O+1;return P end;local function Q(N,R)local S=N.index+R;local T=string.sub(N.source,N.index,S-1)N.index=S;return T end;local function U(N)local R=N:s_szt()local T;if R~=0 then T=string.sub(Q(N,R),1,-2)end;return T end;local function V(R,W)return function(N)local S=N.index+R;local X=W(N.source,N.index,S)N.index=S;return X end end;local function Y(R,W)return function(N)local Z=W(N.source,N.index)N.index=N.index+R;return Z end end;local function _(N)local R=N:s_int()local a0=table.create(R)for p=1,R do local a1=N:s_ins()local a2=b.band(a1,0x3F)local a3=h[a2]local a4=i[a2]local a5={value=a1,op=g[a2],A=b.band(b.rshift(a1,6),0xFF)}if a3=='ABC'then a5.B=b.band(b.rshift(a1,23),0x1FF)a5.C=b.band(b.rshift(a1,14),0x1FF)a5.is_KB=a4.b=='OpArgK'and a5.B>0xFF;a5.is_KC=a4.c=='OpArgK'and a5.C>0xFF;if a2==10 then local m=b.band(b.rshift(a5.B,3),31)if m==0 then a5.const=a5.B else a5.const=b.lshift(b.band(a5.B,7)+8,m-1)end end elseif a3=='ABx'then a5.Bx=b.band(b.rshift(a1,14),0x3FFFF)a5.is_K=a4.b=='OpArgK'elseif a3=='AsBx'then a5.sBx=b.band(b.rshift(a1,14),0x3FFFF)-131071 end;a0[p]=a5 end;return a0 end;local function a6(N)local R=N:s_int()local a0=table.create(R)for p=1,R do local a7=M(N)local a8;if a7==1 then a8=M(N)~=0 elseif a7==3 then a8=N:s_num()elseif a7==4 then a8=U(N)end;a0[p]=a8 end;return a0 end;local function a9(N,k)local R=N:s_int()local a0=table.create(R)for p=1,R do a0[p]=e(N,k)end;return a0 end;local function aa(N)local R=N:s_int()local a0=table.create(R)for p=1,R do a0[p]=N:s_int()end;return a0 end;local function ab(N)local R=N:s_int()local a0=table.create(R)for p=1,R do a0[p]={varname=U(N),startpc=N:s_int(),endpc=N:s_int()}end;return a0 end;local function ac(N)local R=N:s_int()local a0=table.create(R)for p=1,R do a0[p]=U(N)end;return a0 end;function e(N,ad)local ae={}local k=U(N)or ad;ae.source=k;N:s_int()N:s_int()ae.num_upval=M(N)ae.num_param=M(N)M(N)ae.max_stack=M(N)ae.code=_(N)ae.const=a6(N)ae.subs=a9(N,k)aa(N)ab(N)ac(N)for af,ag in ae.code do if ag.is_K then ag.const=ae.const[ag.Bx+1]else if ag.is_KB then ag.const_B=ae.const[ag.B-0xFF]end;if ag.is_KC then ag.const_C=ae.const[ag.C-0xFF]end end end;return ae end;function c(k)local ah;local ai;local aj;local ak;local al;local am;local an;local ao={index=1,source=k}assert(Q(ao,4)=='\27Lua','invalid Lua signature')assert(M(ao)==0x51,'invalid Lua version')assert(M(ao)==0,'invalid Lua format')ai=M(ao)~=0;aj=M(ao)ak=M(ao)al=M(ao)am=M(ao)an=M(ao)~=0;ah=ai and F or G;ao.s_int=V(aj,ah)ao.s_szt=V(ak,ah)ao.s_ins=V(al,ah)if an then ao.s_num=V(am,ah)elseif L[am]then ao.s_num=Y(am,L[am][ai and'little'or'big'])else error('unsupported float size')end;return e(ao,'@wfuscator-vm')end;local function ap(a0,aq)for p,ar in pairs(a0)do if ar.index>=aq then ar.value=ar.store[ar.index]ar.store=ar;ar.index='value'a0[p]=nil end end end;local function as(a0,aq,at)local au=a0[aq]if not au then au={index=aq,store=at}a0[aq]=au end;return au end;local function av(aw,ax)local k=aw.source;error(string.format('%s: %s',k,ax),0)end;local function ay(az,aA,aB)local aC=az.code;local aD=az.subs;local aE=az.vararg;local aF=-1;local aG={}local at=az.memory;local aH=az.pc;while true do local aI=aC[aH]local a2=aI.op;aH=aH+1;if a2<18 then if a2<8 then if a2<3 then if a2<1 then for p=aI.A,aI.B do at[p]=nil end elseif a2>1 then local ar=aB[aI.B]at[aI.A]=ar.store[ar.index]else local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;at[aI.A]=aJ+aK end elseif a2>3 then if a2<6 then if a2>4 then local aL=aI.A;local aM=aI.B;local aq;if aI.is_KC then aq=aI.const_C else aq=at[aI.C]end;at[aL+1]=at[aM]at[aL]=at[aM][aq]else at[aI.A]=aA[aI.const]end elseif a2>6 then local aq;if aI.is_KC then aq=aI.const_C else aq=at[aI.C]end;at[aI.A]=at[aI.B][aq]else local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;at[aI.A]=aJ-aK end else at[aI.A]=at[aI.B]end elseif a2>8 then if a2<13 then if a2<10 then aA[aI.const]=at[aI.A]elseif a2>10 then if a2<12 then local aL=aI.A;local aM=aI.B;local aN=aI.C;local aO;if aM==0 then aO=aF-aL else aO=aM-1 end;local aP=table.pack(at[aL](table.unpack(at,aL+1,aL+aO)))local aQ=aP.n;if aN==0 then aF=aL+aQ-1 else aQ=aN-1 end;table.move(aP,1,aQ,aL,at)else local ar=aB[aI.B]ar.store[ar.index]=at[aI.A]end else local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;at[aI.A]=aJ*aK end elseif a2>13 then if a2<16 then if a2>14 then local aL=aI.A;local aM=aI.B;local aO;if aM==0 then aO=aF-aL else aO=aM-1 end;ap(aG,0)return at[aL](table.unpack(at,aL+1,aL+aO))else local aq,aR;if aI.is_KB then aq=aI.const_B else aq=at[aI.B]end;if aI.is_KC then aR=aI.const_C else aR=at[aI.C]end;at[aI.A][aq]=aR end elseif a2>16 then at[aI.A]=table.create(aI.const)else local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;at[aI.A]=aJ/aK end else at[aI.A]=aI.const end else local aL=aI.A;local aS=at[aL+2]local aq=at[aL]+aS;local aT=at[aL+1]local aU;if aS==math.abs(aS)then aU=aq<=aT else aU=aq>=aT end;if aU then at[aL]=aq;at[aL+3]=aq;aH=aH+aI.sBx end end elseif a2>18 then if a2<28 then if a2<23 then if a2<20 then at[aI.A]=#at[aI.B]elseif a2>20 then if a2<22 then local aL=aI.A;local aM=aI.B;local R;if aM==0 then R=aF-aL+1 else R=aM-1 end;ap(aG,0)return table.unpack(at,aL,aL+R-1)else local aM=aI.B;local T=at[aM]for p=aM+1,aI.C do T=T..at[p]end;at[aI.A]=T end else local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;at[aI.A]=aJ%aK end elseif a2>23 then if a2<26 then if a2>24 then ap(aG,aI.A)else local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;if(aJ==aK)==(aI.A~=0)then aH=aH+aC[aH].sBx end;aH=aH+1 end elseif a2>26 then local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;if(aJ<aK)==(aI.A~=0)then aH=aH+aC[aH].sBx end;aH=aH+1 else local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;at[aI.A]=aJ^aK end else at[aI.A]=aI.B~=0;if aI.C~=0 then aH=aH+1 end end elseif a2>28 then if a2<33 then if a2<30 then local aJ,aK;if aI.is_KB then aJ=aI.const_B else aJ=at[aI.B]end;if aI.is_KC then aK=aI.const_C else aK=at[aI.C]end;if(aJ<=aK)==(aI.A~=0)then aH=aH+aC[aH].sBx end;aH=aH+1 elseif a2>30 then if a2<32 then local aV=aD[aI.Bx+1]local aW=aV.num_upval;local aX;if aW~=0 then aX={}for p=1,aW do local aY=aC[aH+p-1]if aY.op==g[0]then aX[p-1]=as(aG,aY.B,at)elseif aY.op==g[4]then aX[p-1]=aB[aY.B]end end;aH=aH+aW end;at[aI.A]=d(aV,aA,aX)else local aL=aI.A;local aM=aI.B;if not at[aM]~=(aI.C~=0)then at[aL]=at[aM]aH=aH+aC[aH].sBx end;aH=aH+1 end else at[aI.A]=-at[aI.B]end elseif a2>33 then if a2<36 then if a2>34 then local aL=aI.A;local R=aI.B;if R==0 then R=aE.len;aF=aL+R-1 end;table.move(aE.list,1,R,aL,at)else local aL=aI.A;local aZ,aT,aS;aZ=assert(tonumber(at[aL]),'`for` initial value must be a number')aT=assert(tonumber(at[aL+1]),'`for` limit must be a number')aS=assert(tonumber(at[aL+2]),'`for` step must be a number')at[aL]=aZ-aS;at[aL+1]=aT;at[aL+2]=aS;aH=aH+aI.sBx end elseif a2>36 then local aL=aI.A;local aN=aI.C;local R=aI.B;local a_=at[aL]local b0;if R==0 then R=aF-aL end;if aN==0 then aN=aI[aH].value;aH=aH+1 end;b0=(aN-1)*f;table.move(at,aL+1,aL+R,b0+1,a_)else at[aI.A]=not at[aI.B]end else if not at[aI.A]~=(aI.C~=0)then aH=aH+aC[aH].sBx end;aH=aH+1 end else local aL=aI.A;local b1=aL+3;if type(at[aL])=="table"then at[aL+1]=at[aL]at[aL]=pairs(at[aL])end;local b2={at[aL](at[aL+1],at[aL+2])}table.move(b2,1,aI.C,b1,at)if at[b1]~=nil then at[aL+2]=at[b1]aH=aH+aC[aH].sBx end;aH=aH+1 end else aH=aH+aI.sBx end;az.pc=aH end end;function d(ae,aA,b3)local function b4(...)local b5=table.pack(...)local at=table.create(ae.max_stack)local aE={len=0,list={}}table.move(b5,1,ae.num_param,0,at)if ae.num_param<b5.n then local b6=ae.num_param+1;local R=b5.n-ae.num_param;aE.len=R;table.move(b5,b6,b6+R-1,1,aE.list)end;local az={vararg=aE,memory=at,code=ae.code,subs=ae.subs,pc=1}local b7=table.pack(pcall(ay,az,aA,b3))if b7[1]then return table.unpack(b7,2,b7.n)else local aw={pc=az.pc,source=ae.source}return av(aw,b7[2])end end;return b4 end;a=function(b8,aA)return d(c(b8),aA)()end end local g=table.create;local o=string.sub;local r=ipairs;local bd=math;local i=table.unpack;local z=21;local aa=110;local e=table.insert;local p=string.gsub;local n=string.char;local h=table.pack;local q=string.find;local t='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'local v=function(ad,an)local am,ah=1,0;local ae=z+an;while ad>0 and ae>0 do local af,ag=ad%2,ae%2;if af~=ag then ah=ah+am;end;ad=(ad-af)/2;ae=(ae-ag)/2;am=am*2;end;if ad<ae then ad=ae;end;while ad>0 do local af=ad%2;if af>0 then ah=ah+am;end;ad=(ad-af)/2;am=am*2;end;return ah;end;local u=function(ai,an)ai=p(ai,'[^'..t..'=]','')ai=p(ai,'.',function(aj)if(aj=='=')then return''end;local ak,af='',(q(t,aj)-1)for al=6,1,-1 do ak=ak..(af%2^al-af%2^(al-1)>0 and'1'or'0')end;return ak;end)ai=p(ai,'%d%d%d?%d?%d?%d?%d?%d?',function(aj)if(#aj~=8)then return''end;local am=0;for al=1,8 do am=am+(o(aj,al,al)=='1'and 2^(8-al)or 0)end;return n(v(am,an))end)return ai;end;local s=function(ad,an)local am,ah=1,0;local ae=aa+an;while ad>0 and ae>0 do local af,ag=ad%2,ae%2;if af~=ag then ah=ah+am;end;ad=(ad-af)/2;ae=(ae-ag)/2;am=am*2;end;if ad<ae then ad=ae;end;while ad>0 do local af=ad%2;if af>0 then ah=ah+am;end;ad=(ad-af)/2;am=am*2;end;return ah;end;local x,bn,ao,bh,bo,bf,bk,be,bc,bg,as,y,bp,bb,c,l,bm,f,bq,w,m,d,j,bl,bj,k,bi=function(ad,am)local ah=g(0)for ae=1,#ad,am do e(ah,o(ad,ae,ae+am-1))end;return ah;end,game,assert,loadstring,script,getfenv,require,string,task,getmetatable,error,(function()ao=function(ap,aq,ar)if not ap then as(aq,2+(ar or 0))end;end;local y=g(0)y['partial']=function(at,...)local au=h(...)local av=h(i(au))return function(...)local au=h(...)local aw=g(0)for ax,ay in r(av)do e(aw,ay)end;for ax,ay in r(h(i(au)))do e(aw,ay)end;return at(i(aw))end;end;return y;end)(),os,table,240,math.random,warn,table.remove,UDim2,function(ag)local ah=""repeat local br=ag/2;local al,bs=bd['modf'](br)ag=al;ah=bd['ceil'](bs)..ah;until ag==0;return ah;end,string.len,12,task.spawn,typeof,pcall,task.wait,next;local ab=g(0)ab[92]=s(229,118,234,253)ab[77]=s(192,82)ab[90]=s(221,113)ab[42]=u("Yw==",6)ab[3]=u("c39qdg==",9)ab[23]=u("REE=",10)ab[45]=u("Z3Z0fA==",2)ab[1]=u("VEFCTEU=",11)ab[95]=s(172,90)ab[56]=s(163,114)ab[127]=s(179,83)ab[53]=u("anFvfnx0",10)ab[61]=s(184,97)ab[32]=u("Kg==",6)ab[21]=u("bQ==",4)ab[50]=u("Y3hmd3V9",1)ab[94]=s(202,94)ab[14]=u("cXd7cw==",1)ab[120]=s(174,64)ab[12]=u("a2ZvenB5",10)ab[108]=s(189,87,192)ab[67]=s(251,62)ab[126]=s(229,78,248)ab[44]=u("UUBTVUhATQ==",12)ab[13]=u("aX9scA==",9)ab[118]=s(222,110)ab[10]=u("Z3R2e3s=",2)ab[31]=u("KQ==",4)ab[69]=s(222,113)ab[97]=s(191,81)ab[99]=s(211,109,748)ab[81]=s(199,87,230,14)ab[104]=s(196,87,57)ab[124]=s(192,63)ab[87]=s(160,51,163,282)ab[71]=s(252,57)ab[123]=s(214,102,519)ab[59]=s(153,91,938)ab[116]=s(215,103,665)ab[52]=u("c3Rpf2hu",5)ab[62]=s(144,58,457,843)ab[22]=u("HHw=",12)ab[60]=s(171,82)ab[8]=u("c3B+e2xrbXZxeA==",10)ab[98]=s(220,110)ab[125]=s(218,77)ab[110]=s(165,57)ab[20]=u("YQ==",1)ab[6]=u("eXtqeHtwaA==",9)ab[35]=u("",3)ab[54]=u("MWx3eHt1fDltdjl/cHd9OW94a3B4e3V8OXB3OW90MA==",4)ab[40]=u("em5ofw==",8)ab[47]=u("a3p4cA==",6)ab[113]=s(192,84,236,189,89)ab[25]=u("em5ofw==",8)ab[29]=u("",8)ab[109]=s(211,99,799)ab[38]=u("aA==",7)ab[24]=u("",11)ab[115]=s(213,103)ab[41]=u("ZA==",2)ab[91]=s(183,71)ab[101]=s(213,115)ab[79]=s(227,115)ab[86]=s(166,98,115)ab[128]=s(245,83)ab[78]=s(167,57,367)ab[82]=s(195,83)ab[70]=s(226,116)ab[68]=s(138,72)ab[34]=u("OXg5eDl4Izl4Izl4Izl4Izl4Izl4Iw==",7)ab[102]=s(227,60)ab[65]=s(142,93)ab[9]=u("eHNuYg==",1)ab[112]=s(186,74)ab[4]=u("a2xqcXZ/",3)ab[89]=s(204,95)ab[15]=u("U0NSSVBU",11)ab[28]=u("Iw==",9)ab[93]=s(173,62,131)ab[17]=u("TF1wdCs=",4)ab[117]=s(168,58)ab[2]=u("YndlfQ==",1)ab[73]=s(184,76)ab[39]=u("eHN6aQ==",6)ab[30]=u("RklORA==",11)ab[37]=u("amx7",4)ab[121]=s(158,56,421,375,828,184)ab[18]=u("Yg==",5)ab[96]=s(205,87)ab[43]=u("UA==",12)ab[64]=s(135,84,260)ab[55]=u("",3)ab[63]=s(153,89,980)ab[88]=s(188,78,922)ab[106]=s(222,113)ab[48]=u("Z3Z0fA==",2)ab[7]=u("enhpcHhpfGl8f3F4",8)ab[100]=s(184,76)ab[58]=s(153,115)ab[80]=s(185,75,293,438)ab[114]=s(224,114)ab[119]=s(201,93,966)ab[11]=u("b3hsaHRveA==",8)ab[111]=s(190,78)ab[33]=u("fmpsew==",4)ab[16]=u("d2s=",3)ab[105]=s(252,81)ab[122]=s(203,93,888)ab[84]=s(233,112,585)ab[27]=u("",7)ab[57]=s(157,65,789,135)ab[49]=u("f3hlc2Ri",1)ab[129]=s(171,58)ab[5]=u("c2p7c2hp",5)ab[76]=s(215,103)ab[74]=s(190,78,39)ab[107]=s(163,53)ab[83]=s(203,93)ab[66]=s(156,89,813,792)ab[36]=u("Jw==",1)ab[19]=u("Vg==",12)ab[103]=s(161,59)ab[85]=s(241,85)ab[26]=u("Mw==",8)ab[46]=u("bHdpeHpy",4)ab[72]=s(190,78,7,818)ab[51]=u("UUBCSg==",12)ab[75]=s(211,99)local ba=function(ar)local ac={[ab[s(176,ab[56])]]=bb,[ab[s(162,ab[57])]]=bc,[ab[s(226,115)]]=bd,[ab[s(226,ab[58])]]=be,[ab[s(187,ab[59])]]=r,[ab[s(223,ab[60])]]=bf,[ab[s(226,ab[61])]]=bg,[ab[s(197,95,758)]]=bh,[ab[s(189,70)]]=bi,[ab[s(172,ab[62])]]=bj,[ab[s(199,ab[63],359)]]=bk,[ab[s(191,ab[64])]]=bl,[ab[s(184,71)]]=bm,[ab[s(189,ab[65],696)]]=bn,[ab[s(185,72)]]=bo,[ab[s(164,70)]]=bp,[ab[s(216,ab[66])]]=bq,}ac[ab[s(215,ab[67])]]=c;ac[ab[s(185,ab[68])]]=d;ac[ab[s(176,ab[84])]]=function(ad,an)local am,ah=ab[69],ab[70];local ae=ac[ab[s(221,ab[71])]]+an;while ad>ab[78]and ae>ab[77]do local af,ag=ad%ab[72],ae%ab[73];if af~=ag then ah=ah+am;end;ad=(ad-af)/ab[74];ae=(ae-ag)/ab[75];am=am*ab[76]end;if ad<ae then ad=ae;end;while ad>ab[83]do local af=ad%ab[79];if af>ab[80]then ah=ah+am;end;ad=(ad-af)/ab[81];am=am*ab[82]end;return ah;end;ac[ab[s(204,119)]]=function(ai,an)ai=p(ai,ab[s(202,111,735)]..t..ab[s(220,92,174)],ab[s(184,ab[85])])ai=p(ai,ab[s(188,56)],function(aj)if(aj==ab[s(248,ab[86])])then return ab[s(223,86,239,288)]end;local ak,af=ab[s(168,71)],(q(t,aj)-ab[87])for al=ab[94],ab[93],-ab[92]do ak=ak..(af%ab[91]^al-af%ab[90]^(al-ab[89])>ab[88]and ab[s(146,68)]or ab[s(206,99)])end;return ak;end)ai=p(ai,ab[s(240,ab[95])],function(aj)if(#aj~=ab[96])then return ab[s(149,72)]end;local am=ab[97]for al=ab[104],ab[103]do am=am+(o(aj,al,al)==ab[s(134,ab[101],441,751)]and ab[100]^(ab[99]-al)or ab[98])end;return n(ac[ab[s(192,120,312)]](am,an))end)return ai;end;ac[ab[s(141,ab[121])]]=function(ad,an)local am,ah=ab[106],ab[107];local ae=ac[ab[s(204,ab[108])]]+an;while ad>ab[115]and ae>ab[114]do local af,ag=ad%ab[109],ae%ab[110];if af~=ag then ah=ah+am;end;ad=(ad-af)/ab[111];ae=(ae-ag)/ab[112];am=am*ab[113]end;if ad<ae then ad=ae;end;while ad>ab[120]do local af=ad%ab[116];if af>ab[117]then ah=ah+am;end;ad=(ad-af)/ab[118];am=am*ab[119]end;return ah;end;ac[ab[s(227,103)]]=(function()ao=function(ap,aq,ar)if not ap then as(aq,ab[123]+(ar or ab[122]))end;end;local y=g(0)y[ab[s(140,50)]]=function(at,...)local au=h(...)local av=h(i(au))return function(...)local au=h(...)local aw=g(0)for ax,ay in r(av)do e(aw,ay)end;for ax,ay in r(h(i(au)))do e(aw,ay)end;return at(i(aw))end;end;return y;end)();(function(az)end)(ac)return ac;end;return a(ab[s(149,ab[128])],ba(ab[129]))end)()
