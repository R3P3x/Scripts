local player = game.Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local Fluent = nil
do
    if typeof(script) == "Instance" and script:FindFirstChild("Fluent") and script:FindFirstChild("Fluent"):IsA("ModuleScript") then
        Fluent = require(script:FindFirstChild("Fluent"))
    else
        local Success, Result = pcall(function()
            return game:HttpGet("https://raw.githubusercontent.com/R3P3x/Scripts/refs/heads/main/Fluent.txt")
        end)
        if Success and typeof(Result) == "string" then
            Fluent = loadstring(Result)()
        else
            return
        end
    end
end
local function Notify(Message)
    if Fluent and typeof(Message) == "string" then
        Fluent:Notify({
            Title = "Notification",
            Content = Message,
            SubContent = "[Made By S_B]",
            Duration = 10
        })
    end
end
local send = function(murderer : String, sherriff : String)
    Notify(murderer.." is the murderer!\n"..sherriff.." is the sherrif!")
end
local detecting = false
local murd = nil
local sherrif = nil
for _, plr in game.Players:GetPlayers() do
    plr.Backpack.ChildAdded:Connect(function(child)
        if child.Name == "Knife" then
            newmurd = plr.Name
        elseif child.Name == "Gun" then
            newsherrif = plr.Name
        end
        if newsherrif ~= sherrif and newsherrif ~= nil and newmurd ~= murd and newmurd ~= nil then
            murd = newmurd
            sherrif = newsherrif
            if detecting == true then
                send(murd, sherrif)
            end
        end
    end)
end

local UISettings = {
    TabWidth = 160,
    Size = { 680, 560 },
    Theme = "Darker",
    Acrylic = false,
    Transparency = true,
    MinimizeKey = "RightShift",
    ShowNotifications = true,
    ShowWarnings = true,
    RenderingMode = "RenderStepped",
    AutoImport = true
}

local Window = Fluent:CreateWindow({
    Title = "Exploit Mystery 2",
    SubTitle = "[Murder Mystery 2 Exploit GUI by S_B]",
    TabWidth = UISettings.TabWidth,
    Size = UDim2.fromOffset(table.unpack(UISettings.Size)),
    Theme = UISettings.Theme,
    Acrylic = UISettings.Acrylic,
    MinimizeKey = UISettings.MinimizeKey
})

local Tabs = { Main = Window:AddTab({Title = "Main", Icon = "list"}) }

Window:SelectTab(1)

local Innocent = Tabs.Main:AddSection("Innocent")

local grabbing = false
local grinding = false
Innocent:AddToggle("Grabber", {
    Title = "Gun Grabber",
    Description = "Automatically grabs the gun when dropped",
    Default = false,
    Callback = function(Value)
        grabbing = Value
    end
})

Innocent:AddToggle("Grinder", {
    Title = "Coin Grinder",
    Description = "Automatically grabs coins.",
    Default = false,
    Callback = function(Value)
        grinding = Value
    end
})

while grabbing == true do
  task.wait(0.2)
  if game.Workspace:FindFirstDescendant("gundrop") then
    local origin = player.Character.HumanoidRootPart.CFrame.Position
    task.wait(0.5)
    player.Character.HumanoidRootPart.CFrame.Position = game.Workspace.gundrop.CFrame.Position
    task.wait(0.2)
    player.Character.HumanoidRootPart.CFrame.Position = origin
  end
end

while grinding == true do
  task.wait(0.2)
  local coinc = game.Workspace:FindFirstDescendant("CoinContainer")
  local coin = coinc:FindFirstChild()
  if coin then
    local origin = player.Character.CFrame.Position
    task.wait(0.2)
    player.Character.CFrame.Position = coin.CFrame.Position
    task.wait(0.3)
    player.Character.CFrame.Position = origin
  end
end

Tabs.Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })

local UISection = Tabs.Settings:AddSection("UI")

UISection:AddDropdown("Theme", {
    Title = "Theme",
    Description = "Changes the UI Theme",
    Values = Fluent.Themes,
    Default = Fluent.Theme,
    Callback = function(Value)
        Fluent:SetTheme(Value)
        UISettings.Theme = Value
        InterfaceManager:ExportSettings()
    end
})

if Fluent.UseAcrylic then
    UISection:AddToggle("Acrylic", {
        Title = "Acrylic",
        Description = "Blurred Background requires Graphic Quality >= 8",
        Default = Fluent.Acrylic,
        Callback = function(Value)
            if not Value or not UISettings.ShowWarnings then
                Fluent:ToggleAcrylic(Value)
            elseif UISettings.ShowWarnings then
                Window:Dialog({
                    Title = "Warning",
                       Content = "This Option can be detected! Activate it anyway?",
                        Buttons = {
                            {
                                Title = "Confirm",
                                Callback = function()
                                    Fluent:ToggleAcrylic(Value)
                                end
                            },
                            {
                                Title = "Cancel",
                                Callback = function()
                                    Fluent.Options.Acrylic:SetValue(false)
                                end
                            }
                        }
                    })
                end
            end
        })
    end

    UISection:AddToggle("Transparency", {
        Title = "Transparency",
        Description = "Makes the UI Transparent",
        Default = UISettings.Transparency,
        Callback = function(Value)
            Fluent:ToggleTransparency(Value)
            UISettings.Transparency = Value
            InterfaceManager:ExportSettings()
        end
    })

    if IsComputer then
        UISection:AddKeybind("MinimizeKey", {
            Title = "Minimize Key",
            Description = "Changes the Minimize Key",
            Default = Fluent.MinimizeKey,
            ChangedCallback = function(Value)
                UISettings.MinimizeKey = pcall(UserInputService.GetStringForKeyCode, UserInputService, Value) and UserInputService:GetStringForKeyCode(Value) or "RMB"
                InterfaceManager:ExportSettings()
            end
        })
        Fluent.MinimizeKeybind = Fluent.Options.MinimizeKey
    end
